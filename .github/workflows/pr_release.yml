name: Create Release Pull Request

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  create-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Configure npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Configure GitHub
        run: |
          echo "GITHUB_TOKEN=${{ secrets.PAT_TOKEN }}" >> $GITHUB_ENV

      - name: Generate version
        id: generate_version
        run: |
          VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | awk '{print $5}')
          if [ -z "$VERSION" ]; then
            echo "Error: VERSION is empty. Please check semantic-release output."
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create a feature branch for release
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git checkout -b release-${{ env.VERSION }}

      - name: Run semantic release in a feature branch
        run: |
          npx semantic-release --branch release-${{ env.VERSION }}

      - name: Push feature branch
        run: |
          git push origin release-${{ env.VERSION }}

      - name: Create pull request
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release ${process.env.INPUT_VERSION}`,
              head: `release-${process.env.INPUT_VERSION}`,
              base: 'main',
              token: process.env.GITHUB_TOKEN
            });
            console.log(`Created pull request #${pullRequest.number}`);

            // Add a label to the PR
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullRequest.number,
              labels: ['release'],
              token: process.env.GITHUB_TOKEN
            });
